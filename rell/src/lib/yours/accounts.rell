val LOCKED_ACCOUNT_KIND = "LOCKED";

/**
 * Helper function to provides the possibility to lock an asset for a user on the dapp chain.
 * Each account can have a unique locked account associated with it which is a special account,
 * where the owner itself cannot transfer it out from themself, instead the dapp controls it.
 * 
 * @see ensure_locked_account(account_id)
 * @see get_locked_account_id(account_id)
 * 
 * @param account_id The account to get the locked account for.
 * @returns The locked account.
 */
function get_locked_account(account_id: byte_array): ft4.accounts.account? {
  val id = get_locked_account_id(account_id);
  return ft4.accounts.account @? { id };
}

/**
 * Ensures that a locked account exists for the given account.
 * 
 * @see get_locked_account(account_id)
 * @see get_locked_account_id(account_id)
 * 
 * @param account_id The account to ensure the locked account for.
 * @returns The locked account.
 */
function ensure_locked_account(account_id: byte_array) {
  val id = get_locked_account_id(account_id);
  return ft4.accounts.account @? { id } ?: ft4.accounts.create_account_without_auth(id, LOCKED_ACCOUNT_KIND);
}

/**
 * Helper function to get the ID of the locked account for a given account.
 * 
 * @see get_locked_account(account_id)
 * @see ensure_locked_account(account_id)
 * 
 * @param account_id The account to get the locked account ID for.
 * @returns The ID of the locked account.
 */
function get_locked_account_id(account_id: byte_array) {
  return ("SA", LOCKED_ACCOUNT_KIND, account_id).hash();
}