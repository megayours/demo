@extend(auth.auth_handler)
function () = auth.add_auth_handler(
  flags = []
);

operation import_nft(metadata: yours.token_metadata_incoming, chain: name, contract: text, token_id: integer) {
  val account = auth.authenticate();

  create imported_token(chain, contract, token_id);

  val token = yours.create_token_with_id(
    yours.token_info(
      project = metadata.yours.project,
      collection = metadata.yours.collection,
      name = metadata.name,
      modules = []
    ),
    token_id
  );

  create tracker.tracker(token, op_context.last_block_time);

  create yours.imported_attributes(token, json = metadata.properties);

  yours.attach_module(token, "tracker");
  yours.attach_image(token, metadata.image);
  yours.attach_description(token, metadata.description);
  yours.attach_animation(token, metadata.animation_url);

  yours.mint(token, yours.balance_info(account, amount = 1));
}

operation create_nft(metadata: yours.token_metadata_incoming) {
  val account = auth.authenticate();

  require(account.id == metadata.yours.project.owner_id, "Only project owner can create tokens");
  yours.assert_project_owner(metadata.yours.project.name, account.id);

  val token = yours.create_token(
    yours.token_info(
      project = metadata.yours.project,
      collection = metadata.yours.collection,
      name = metadata.name,
      modules = []
    )
  );

  create yours.imported_attributes(token, json = metadata.properties);

  yours.attach_module(token, "tracker");
  yours.attach_image(token, metadata.image);
  yours.attach_description(token, metadata.description);
  yours.attach_animation(token, metadata.animation_url);

  yours.mint(token, yours.balance_info(account, amount = 1));
}