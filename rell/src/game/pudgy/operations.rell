@extend(ft4.auth.auth_handler)
function () = ft4.auth.add_auth_handler(
  flags = []
);

operation equip_fishing_rod(pudgy_penguin_id: integer, fishing_rod_id: integer) {
  val account = ft4.auth.authenticate();
  
  val pudgy_penguin = pudgy_penguin @ { .token.id == pudgy_penguin_id };
  require(
    yours.token_balance @? { account, pudgy_penguin.token } != null, 
    "Not the owner of the token"
  );

  val fishing_rod = fishing_rod @ { .token.id == fishing_rod_id };
  require(
    yours.token_balance @? { account, fishing_rod.token } != null, 
    "Not the owner of the token"
  );
  
  create equipped_fishing_rod(pudgy_penguin, fishing_rod);
}

operation unequip_fishing_rod(pudgy_penguin_id: integer) {
  val account = ft4.auth.authenticate();
  
  val equipped_fishing_rod = equipped_fishing_rod @ { .pudgy_penguin.token.id == pudgy_penguin_id };
  require(
    yours.token_balance @? { account, equipped_fishing_rod.fishing_rod.token } != null, 
    "Not the owner of the token"
  );

  delete equipped_fishing_rod;
}

operation pull_fish(pudgy_penguin_id: integer) {
  val account = ft4.auth.authenticate();
  
  val pudgy_penguin = pudgy_penguin @ { .token.id == pudgy_penguin_id };
  require(
    yours.token_balance @? { account, pudgy_penguin.token } != null,
    "Not the owner of the token"
  );

  pudgy_penguin.fishes_caught += 1;

  val fishing_rod = equipped_fishing_rod @ { .pudgy_penguin.token.id == pudgy_penguin_id } ( .fishing_rod );
  fishing_rod.durability -= 1;
}